function getDishFromKeyword(keyword) {
    return dishes.find(dish => dish.keyword === keyword);
}

function totalCost() {
    const selectesDish = document.querySelectorAll(".menu-element.selected");
    let total = Array.from(selectesDish).reduce((sum, dish_element) => {
        const dish = getDishFromKeyword(dish_element.dataset.dish);
        return sum + (dish ? dish.price : 0)
    }, 0);

    const orderCost = document.querySelector(".order-coast");
    orderCost.innerHTML = `
        <p><b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞</b></p>
        <p class="coast">${total}&#x20bd;</p>
    `;
}


function infoAfterAddDishes(dish) {
    const koctul = document.querySelector(".order-items-not");
    const info =  document.querySelector(".order-items");
    koctul.style.display = "none";

    const categoryMap= {
        soup: { selector: ".order-item-soup", label: "–°—É–ø", inputId: "input-soup" },
        main_food: { selector: ".order-item-main-food", label: "–ì–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ", inputId: "input-main-food" },
        salads_starters: { selector: ".order-item-salads-starters", label: "–°–∞–ª–∞—Ç –∏–ª–∏ —Å—Ç–∞—Ä—Ç–µ—Ä", inputId: "input-salads-starters"},
        drink: { selector: ".order-item-drink", label: "–ù–∞–ø–∏—Ç–æ–∫", inputId: "input-drink" },
        desserts: { selector: ".order-item-desserts", label: "–î–µ—Å–µ—Ä—Ç", inputId: "input-desserts" }
    };

    const categoryInfo = categoryMap[dish.category];
    if (categoryInfo) {
        const categoryElement = document.querySelector(categoryInfo.selector);
        categoryElement.innerHTML = `
            <p><b>${categoryInfo.label}</b></p>
            <p>${dish.name} ${dish.price}‚ÇΩ</p>
        `;
        const inputElement = document.getElementById(categoryInfo.inputId);
        inputElement.value = dish.keyword;
    }

    document.querySelectorAll(".menu-element").forEach(item => {
        const currentDish = getDishFromKeyword(item.dataset.dish);
        if (currentDish && currentDish.category === dish.category) {
            item.classList.remove("selected");
        }

    });

    const selectedDish = document.querySelector(`[data-dish="${dish.keyword}"]`);
    if (selectedDish) {
        selectedDish.classList.add("selected");
    }

    totalCost();

}

function clickButtons() {
    const buttons = document.querySelectorAll(".btn");
    buttons.forEach(button => {
        button.addEventListener("click", event => {
            const menuItem = event.target.closest(".menu-element");
            const dish = getDishFromKeyword(menuItem.dataset.dish);
            if (dish) {
                infoAfterAddDishes(dish);
            }
        });
    });
}


function filterButtons() {
    const kindButtons = document.querySelectorAll('.kind-buttons button');

    kindButtons.forEach(button => {
        button.addEventListener('click', () => {

            const category = button.closest('.kind-buttons').parentNode.id;
            const kind = button.dataset.kind;
            const menuContainer = document.querySelector(`#${category} .menu`);
            const allCards = menuContainer.querySelectorAll('.menu-element');


            if (button.classList.contains('active')) {
                button.classList.remove('active');
                allCards.forEach(card => {
                    card.style.display = '';
                });
            } 
            else {

                const buttonsInCategory = button.parentNode.querySelectorAll('button');
                buttonsInCategory.forEach(btn => btn.classList.remove('active'));

                button.classList.add('active');
                allCards.forEach(card => {
                    if (card.dataset.kind === kind) {
                        card.style.display = '';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }
        });
    });
}

document.querySelector("form").addEventListener("submit", function (event) {
    event.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    const requiredCategories = ["soup", "main_food", "salads_starters", "drink"]; // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–æ–º–±–æ
    const selectedCategories = new Set(); // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –±–ª—é–¥–æ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    document.querySelectorAll(".kind-buttons button").forEach(item => {
        const dishCategory = item.closest('.kind-buttons').parentNode.id;
        console.log(dishCategory)
        selectedCategories.add(dishCategory);
    });

    const missingCategories = requiredCategories.filter(category => !selectedCategories.has(category));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å
    let notificationText = "";

    if (selectedCategories.size === 0) {
        notificationText = "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞.";
    } else if (missingCategories.includes("drink") && missingCategories.length === 1) {
        notificationText = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫.";
    } else if (
        (missingCategories.includes("main_food") || missingCategories.includes("salads_starters")) &&
        !missingCategories.includes("soup")
    ) {
        notificationText = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ/—Å–∞–ª–∞—Ç/—Å—Ç–∞—Ä—Ç–µ—Ä.";
    } else if (
        (missingCategories.includes("soup") || missingCategories.includes("main_food")) &&
        !missingCategories.includes("salads_starters")
    ) {
        notificationText = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–ø –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ.";
    } else if (missingCategories.includes("main_food") && missingCategories.length === 1) {
        notificationText = "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –±–ª—é–¥–æ.";
    }

    if (notificationText) {
        showNotification(notificationText);
    } else {
        // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
        this.submit();
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message) {
    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotification = document.querySelector(".notification");
    if (existingNotification) {
        existingNotification.remove();
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement("div");
    notification.className = "notification";
    notification.innerHTML = `
        <p>${message}</p>
        <button class="close-notification">–û–∫–µ–π üëå</button>
    `;

    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    Object.assign(notification.style, {
        position: "fixed",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        zIndex: "1000",
        backgroundColor: "#fff",
        padding: "20px",
        borderRadius: "10px",
        boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
        textAlign: "center",
        fontFamily: "'Oswald', sans-serif"
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.querySelector(".close-notification").addEventListener("click", () => {
        notification.remove();
    });

    document.body.appendChild(notification);
}
